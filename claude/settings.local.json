{
  "permissions": {
    "allow": [
      "Read(//home/cody/code/litestar/litestar-fullstack-spa/**)",
      "Read(//home/cody/code/g/dma/upstream/**)",
      "Bash(make docs)",
      "Bash(find /home/cody/code/litestar/litestar-fullstack-spa/src/py/app -name \"*.py\" -exec grep -l \"FileObject\\|StoredObject\" {} ;)",
      "Bash(python3 -c \"import sys; sys.path.insert(0, ''/home/cody/code/litestar/advanced-alchemy''); import advanced_alchemy; print(''Public API:''); print([x for x in dir(advanced_alchemy) if not x.startswith(''_'')])\")",
      "Bash(ls -la /home/cody/code/litestar/advanced-alchemy/docs/usage/{cli,modeling,repositories,services,types}.rst)",
      "Bash(ls -d /home/cody/code/litestar/advanced-alchemy/docs/usage/{cli,modeling,repositories,services,types}/)",
      "Bash(tee /tmp/docs-build.log)",
      "Bash(ls -lh docs/_build/html/reference/{cli,types,base}.html docs/_build/html/usage/cli/migrations.html)",
      "Bash(awk '{print $9, $5}')",
      "Bash(make docs-clean)",
      "Read(//tmp/**)",
      "Bash(uv run sphinx-build -j 1 -b html docs docs/_build/html)",
      "Bash(gh pr view 585 --json title,body,statusCheckRollup,url)",
      "Bash(gh run view 18620398190 --log-failed)",
      "Bash(uv run pytest tests/integration/test_filters.py::test_order_by_with_func_random -m \"sqlite or aiosqlite\" -v)",
      "Bash(uv run pytest tests/integration/test_filters.py::test_order_by_with_func_lower -m \"sqlite or aiosqlite\" -v)",
      "Bash(uv run pytest tests/integration/test_filters.py::test_before_after_filter tests/integration/test_filters.py::test_on_before_after_filter -m \"sqlite or aiosqlite\" -v)",
      "Bash(gh pr view 585 --json title,state,mergeable,statusCheckRollup)",
      "Bash(gh pr view 585 --json files --jq '.files[].path')",
      "Bash(cat /home/cody/code/litestar/advanced-alchemy/requirements/archive/issue-519-func-support/ARCHIVED.txt)",
      "Bash(gh run view 18624694867 --log-failed)",
      "Bash(uv run pytest tests/integration/test_filters.py::test_order_by_with_func_lower tests/integration/test_filters.py::test_before_after_filter tests/integration/test_filters.py::test_on_before_after_filter -m \"sqlite or aiosqlite\" -v)",
      "Bash(uv run pytest tests/integration/test_filters.py -m \"sqlite or aiosqlite\" -v --tb=short)",
      "Bash(git add tests/integration/test_filters.py)",
      "Bash(gh pr view 586 --json title,body,comments --jq '.comments[] | select(.id == \"\"3419169441\"\") | .body')",
      "Bash(gh api repos/litestar-org/advanced-alchemy/issues/comments/3419169441)",
      "Bash(gh pr view 586 --json files --jq '.files[].path')",
      "Bash(gh pr diff 586)",
      "Bash(gh api repos/litestar-org/advanced-alchemy/issues/comments/3419169441 --jq '.body')",
      "Bash(gh repo view litestar-org/litestar --json url)",
      "Bash(python3 -c \"import advanced_alchemy.types; print([x for x in dir(advanced_alchemy.types.password_hash) if not x.startswith(''_'')])\")",
      "Bash(python3 -c \"import advanced_alchemy.types; print([x for x in dir(advanced_alchemy.types.encrypted_string) if not x.startswith(''_'')])\")",
      "Bash(uv run python -c \"import advanced_alchemy.types.password_hash as ph; print([x for x in dir(ph) if not x.startswith(''_'')])\")",
      "Bash(uv run python -c \"import advanced_alchemy.types.encrypted_string as es; print([x for x in dir(es) if not x.startswith(''_'')])\")",
      "Bash(uv run python -c \"from advanced_alchemy.types.password_hash import HashedPassword; print(''HashedPassword found'')\")",
      "Bash(cat /home/cody/code/litestar/advanced-alchemy/advanced_alchemy/types/password_hash/__init__.py)",
      "Bash(uv run python -c \"import advanced_alchemy.base as b; print(''__init__'' in dir(b))\")",
      "Bash(uv run python -c \"import advanced_alchemy.types as t; print(''__init__'' in dir(t))\")",
      "Bash(ls -d /home/cody/code/litestar/advanced-alchemy/docs/_build/html/reference/{cli,types,base}/)",
      "Bash(make docs-linkcheck)",
      "Bash(gh api:*)",
      "Bash(git log:*)",
      "Bash(uv run pytest:*)"
    ],
    "deny": [],
    "ask": []
  }
}
