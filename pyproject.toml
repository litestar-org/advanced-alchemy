[project]
authors = [
  { name = "Cody Fincher", email = "cody.fincher@gmail.com" },
  { name = "Peter Schutt", email = "peter.github@proton.me" },
  { name = "Janek Nouvertné", email = "j.a.nouvertne@posteo.de" },
  { name = "Jacob Coffee", email = "jacob@z7x.org" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python",
  "Topic :: Software Development",
  "Typing :: Typed",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "Topic :: Database",
  "Topic :: Database :: Database Engines/Servers",
]
dependencies = [
  "sqlalchemy>=2.0.20",
  "alembic>=1.12.0",
  "typing-extensions>=4.0.0",
  "greenlet; sys_platform == \"darwin\"",
  "eval_type_backport; python_version <= \"3.9\"",
]
description = "Ready-to-go SQLAlchemy concoctions."
keywords = ["sqlalchemy", "alembic", "litestar", "sanic", "fastapi", "flask"]
license = { text = "MIT" }
maintainers = [
  { name = "Litestar Developers", email = "hello@litestar.dev" },
  { name = "Cody Fincher", email = "cody@litestar.dev" },
  { name = "Jacob Coffee", email = "jacob@litestar.dev" },
  { name = "Janek Nouvertné", email = "provinzkraut@litestar.dev" },
  { name = "Peter Schutt", email = "peter@litestar.dev" },
  { name = "Visakh Unnikrishnan", email = "guacs@litestar.dev" },
  { name = "Alc", email = "alc@litestar.dev" },
]
name = "advanced_alchemy"
readme = "README.md"
requires-python = ">=3.8"
version = "0.19.2"

[project.urls]
Changelog = "https://docs.advanced-alchemy.litestar.dev/latest/changelog"
Discord = "https://discord.gg/litestar"
Documentation = "https://docs.advanced-alchemy.litestar.dev/latest/"
Funding = "https://github.com/sponsors/litestar-org"
Homepage = "https://docs.advanced-alchemy.litestar.dev/latest/"
Issue = "https://github.com/litestar-org/advanced-alchemy/issues/"
Source = "https://github.com/litestar-org/advanced-alchemy"

[project.optional-dependencies]
uuid = ["uuid-utils>=0.6.1"]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.build.targets.wheel]
packages = ["advanced_alchemy", "advanced_alchemy.extensions.litestar"]

[tool.pdm]
ignore_package_warnings = [
  "alabaster",
  "sphinxcontrib-*",
  "sphinx-*",
  "sphinx",
  "pre-commit",
  "pydata-sphinx-*",
  "slotscheck",
]

[tool.pdm.dev-dependencies]
dev = [
  "asyncmy>=0.2.8",
  "asyncpg>=0.28.0",
  "oracledb>=1.4.0",
  "redis>=5.0.0",
  "duckdb-engine>=0.9.2",
  "aiosqlite>=0.19.0",
  "psycopg[pool,binary]>=3.1.10",
  "psycopg2-binary",
  "pytest-xdist>=3.3.1",
  "sqlalchemy-spanner>=1.6.2",
  "sqlalchemy-cockroachdb>=2.0.0",
  "litestar>=2.0.1",
  "fastapi>=0.103.1",
  "msgspec>=0.18.2",
  "orjson>=3.9.7",
  "pyodbc>=4.0.39",
  "duckdb>=0.9.0",
  "asgi-lifespan>=2.1.0",
  "aioodbc>=0.5.0",
  "eval-type-backport>=0.2.0",
]
docs = [
  "sphinx>=7.1.2",
  "sphinx-autobuild>=2021.3.14",
  "sphinx-copybutton>=0.5.2",
  "sphinx-click>=5.0.1",
  "sphinx-toolbox>=3.5.0",
  "sphinx-design>=0.5.0",
  "sphinx-paramlinks>=0.6.0",
  "sphinx-togglebutton>=0.3.2",
  #    "litestar-sphinx-theme @ {root:uri}/../litestar-sphinx-theme", # only needed when working on the theme
  "litestar-sphinx-theme @ git+https://github.com/litestar-org/litestar-sphinx-theme.git@v3",
  "auto-pytabs[sphinx]>=0.4.0",
  "git-cliff>=2.2.1",
]
extensions = [
  "litestar[cli]>=2.0.0",
  "fastapi>=0.101.0",
  "sanic[ext]>=23.6.0",
  "sanic-testing>=23.6.0",
  "msgspec>=0.18.2",
  "flask>=3.0.0",
  "flask-sqlalchemy>=3.1.1",
]
linting = [
  "pre-commit>=3.4.0",
  "mypy>=1.5.1",
  "ruff>=0.0.287",
  "asyncpg-stubs",
  "types-pytest-lazy-fixture",
  "types-click",
  "types-pyyaml",
  "pyright>=1.1.350",
]
test = [
  "pytest>=7.4.1,<8.0.0",
  "pytest-xdist>=3.3.1",
  "pytest-lazy-fixture>=0.6.3",
  "pytest-asyncio>=0.21.1",
  "pytest-mock>=3.11.1",
  "time-machine>=2.12.0",
  "httpx>=0.24.1",
  "pytz",
  "coverage",
  "pytest-cov",
  "pytest-sugar>=1.0.0",
  "pytest-databases>=0.2.1",
]

[tool.pytest.ini_options]
addopts = ["-q", "-ra"]
asyncio_mode = "auto"
filterwarnings = [
  "ignore::DeprecationWarning:pkg_resources.*",
  "ignore::DeprecationWarning:pkg_resources",
  "ignore::DeprecationWarning:google.rpc",
  "ignore::DeprecationWarning:google.gcloud",
  "ignore::DeprecationWarning:google.iam",
  "ignore::DeprecationWarning:google",
  "ignore::DeprecationWarning:websockets.connection",
]
markers = [
  "integration: SQLAlchemy integration tests",
  "asyncmy: SQLAlchemy MySQL (asyncmy) Tests",
  "asyncpg: SQLAlchemy Postgres (asyncpg) Tests",
  "psycopg_async: SQLAlchemy Postgres (psycopg async) Tests",
  "psycopg_sync: SQLAlchemy Postgres (psycopg sync) Tests",
  "aiosqlite: SQLAlchemy SQLite (aiosqlite) Tests",
  "sqlite: SQLAlchemy SQLite (sqlite) Tests",
  "oracledb_sync: SQLAlchemy Oracle (oracledb sync) Tests",
  "oracledb_async: SQLAlchemy Oracle (oracledb async) Tests",
  "spanner: SQLAlchemy Google Cloud Spanner (sqlalchemy-spanner) Tests",
  "duckdb: SQLAlchemy DuckDB (duckdb-engine) Tests",
  "mssql_sync: SQLAlchemy Microsoft SQL Server (pyodbc) Tests",
  "mssql_async: SQLAlchemy Microsoft SQL Server (aioodbc) Tests",
  "mock_async: SQLAlchemy async mock Tests",
  "mock_sync: SQLAlchemy sync mock Tests",
  "cockroachdb_sync: SQLAlchemy CockroachDB (psycopg2) Tests",
  "cockroachdb_async: SQLAlchemy CockroachDB (asyncpg) Tests",
]
testpaths = ["tests"]

[tool.coverage.run]
concurrency = ["multiprocessing"]
omit = [
  "*/tests/*",
  "advanced_alchemy/alembic/templates/asyncio/env.py",
  "advanced_alchemy/alembic/templates/sync/env.py",
  "advanced_alchemy/extensions/litestar/cli.py",
  "advanced_alchemy/alembic/commands.py",
  "advanced_alchemy/types.py",
  "advanced_alchemy/operations.py",
  "advanced_alchemy/service/*",
]
parallel = true

[tool.coverage.report]
exclude_lines = [
  'pragma: no cover',
  'if TYPE_CHECKING:',
  'except ImportError as e:',
  'except ImportError:',
  '\.\.\.',
  'raise NotImplementedError',
  'if VERSION.startswith("1"):',
  'if pydantic.VERSION.startswith("1"):',
]

[tool.black]
line-length = 120

[tool.ruff]
exclude = [".venv", "node_modules"]
line-length = 120
src = ["advanced_alchemy", "tests"]
target-version = "py38"

[tool.ruff.lint]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
fixable = ["ALL"]
ignore = [
  "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
  "D100",    # pydocstyle - missing docstring in public module
  "D101",    # pydocstyle - missing docstring in public class
  "D102",    # pydocstyle - missing docstring in public method
  "D103",    # pydocstyle - missing docstring in public function
  "D104",    # pydocstyle - missing docstring in public package
  "D105",    # pydocstyle - missing docstring in magic method
  "D106",    # pydocstyle - missing docstring in public nested class
  "D107",    # pydocstyle - missing docstring in __init__
  "D202",    # pydocstyle - no blank lines allowed after function docstring
  "D205",    # pydocstyle - 1 blank line required between summary line and description
  "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
  "E501",    # pycodestyle line too long, handled by black
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "RUF012",  # Ruff-specific rule - annotated with classvar
  "ANN401",
  "ANN102",
  "ANN101",
  "FBT",
  "PLR0913", # too many arguments
  "PT",
  "TD",
  "ARG002",  # ignore for now; investigate
  "PERF203", # ignore for now; investigate
  "PD011",   # pandas
  "PLR0912",
]
select = ["ALL"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 14

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
  "sqlalchemy.ext.declarative.declared_attr",
  "sqlalchemy.orm.declared_attr.directive",
  "sqlalchemy.orm.declared_attr",
]

[tool.ruff.lint.per-file-ignores]
"advanced_alchemy/repository/*.py" = ['C901']
"tests/**/*.*" = [
  "A",
  "ARG",
  "B",
  "BLE",
  "C901",
  "D",
  "DTZ",
  "EM",
  "FBT",
  "G",
  "N",
  "PGH",
  "PIE",
  "PLR",
  "PLW",
  "PTH",
  "RSE",
  "S",
  "S101",
  "SIM",
  "TCH",
  "TRY",
  "UP006",
  "SLF001",
]
[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"
[tool.ruff.lint.isort]
known-first-party = ["advanced_alchemy", "tests"]

[tool.mypy]
disallow_any_generics = false
disallow_untyped_decorators = true
implicit_reexport = false
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
disable_error_code = "attr-defined,type-var,union-attr"
disallow_untyped_decorators = false
module = "tests.*"
warn_unused_ignores = false

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "asyncmy",
  "pyodbc",
  "google.auth.*",
  "google.cloud.*",
  "google.protobuf.*",
  "pyarrow.*",
  "pytest_docker.*",
  "googleapiclient",
  "googleapiclient.*",
  "uuid_utils",
  "uuid_utils.*",
]

[[tool.mypy.overrides]]
module = "advanced_alchemy._serialization"
warn_unused_ignores = false

[[tool.mypy.overrides]]
disallow_untyped_decorators = false
module = "advanced_alchemy.extensions.litestar.cli"

[[tool.mypy.overrides]]
disallow_untyped_decorators = false
module = "advanced_alchemy.types.json"

[[tool.mypy.overrides]]
module = "advanced_alchemy.service.typing"
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = "advanced_alchemy.alembic.templates.*.env"
warn_unreachable = false

[[tool.mypy.overrides]]
disable_error_code = "no-untyped-call"
disallow_untyped_decorators = false
module = "advanced_alchemy.extensions.sanic"
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = "advanced_alchemy.base"
warn_unused_ignores = false

[tool.pyright]
disableBytesTypePromotions = true
exclude = [
  "docs",
  "tests/unit/test_extensions",
  "tests/unit/test_repository.py",
  "tests/helpers.py",
  "tests/docker_service_fixtures.py",
]
include = ["advanced_alchemy"]
pythonVersion = "3.8"
reportUnnecessaryTypeIgnoreComments = true
strict = ["advanced_alchemy/**/*"]
venv = ".venv"
venvPath = "."

[tool.unasyncd]
add_editors_note = true
cache = true
ruff_fix = true
update_docstrings = true

[tool.unasyncd.files]
"advanced_alchemy/repository/_async.py" = "advanced_alchemy/repository/_sync.py"
"advanced_alchemy/repository/memory/_async.py" = "advanced_alchemy/repository/memory/_sync.py"
"advanced_alchemy/service/_async.py" = "advanced_alchemy/service/_sync.py"

[tool.unasyncd.per_file_add_replacements."advanced_alchemy/repository/_async.py"]
SQLAlchemyAsyncMockRepository = "SQLAlchemySyncMockRepository"
"SQLAlchemyAsyncQueryRepository" = "SQLAlchemySyncQueryRepository"
SQLAlchemyAsyncRepository = "SQLAlchemySyncRepository"
SQLAlchemyAsyncRepositoryProtocol = "SQLAlchemySyncRepositoryProtocol"
"SQLAlchemyAsyncSlugRepository" = "SQLAlchemySyncSlugRepository"
SQLAlchemyAsyncSlugRepositoryProtocol = "SQLAlchemySyncSlugRepositoryProtocol"
"async_scoped_session" = "scoped_session"
"sqlalchemy.ext.asyncio.AsyncSession" = "sqlalchemy.orm.Session"
"sqlalchemy.ext.asyncio.scoping.async_scoped_session" = "sqlalchemy.orm.scoping.scoped_session"

[tool.unasyncd.per_file_add_replacements."advanced_alchemy/repository/memory/_async.py"]
SQLAlchemyAsyncMockRepository = "SQLAlchemySyncMockRepository"
"SQLAlchemyAsyncMockSlugRepository" = "SQLAlchemySyncMockSlugRepository"
SQLAlchemyAsyncRepository = "SQLAlchemySyncRepository"
SQLAlchemyAsyncRepositoryProtocol = "SQLAlchemySyncRepositoryProtocol"
"SQLAlchemyAsyncSlugRepository" = "SQLAlchemySyncSlugRepository"
SQLAlchemyAsyncSlugRepositoryProtocol = "SQLAlchemySyncSlugRepositoryProtocol"
"advanced_alchemy.repository._async.SQLAlchemyAsyncRepositoryProtocol" = "advanced_alchemy.repository._sync.SQLAlchemySyncRepositoryProtocol"
"advanced_alchemy.repository._async.SQLAlchemyAsyncSlugRepositoryProtocol" = "advanced_alchemy.repository._sync.SQLAlchemySyncSlugRepositoryProtocol"
"async_scoped_session" = "scoped_session"
"sqlalchemy.ext.asyncio.AsyncEngine" = "sqlalchemy.Engine"
"sqlalchemy.ext.asyncio.AsyncSession" = "sqlalchemy.orm.Session"
"sqlalchemy.ext.asyncio.scoping.async_scoped_session" = "sqlalchemy.orm.scoping.scoped_session"

[tool.unasyncd.per_file_add_replacements."advanced_alchemy/service/_async.py"]
"AsyncIterator" = "Iterator"
"SQLAlchemyAsyncConfigT" = "SQLAlchemySyncConfigT"
SQLAlchemyAsyncMockRepository = "SQLAlchemySyncMockRepository"
SQLAlchemyAsyncMockSlugRepository = "SQLAlchemySyncMockSlugRepository"
SQLAlchemyAsyncQueryService = "SQLAlchemySyncQueryService"
SQLAlchemyAsyncRepository = "SQLAlchemySyncRepository"
SQLAlchemyAsyncRepositoryReadService = "SQLAlchemySyncRepositoryReadService"
SQLAlchemyAsyncRepositoryService = "SQLAlchemySyncRepositoryService"
SQLAlchemyAsyncSlugRepository = "SQLAlchemySyncSlugRepository"
"advanced_alchemy.config.asyncio.SQLAlchemyAsyncConfig" = "advanced_alchemy.config.sync.SQLAlchemySyncConfig"
"advanced_alchemy.repository.SQLAlchemyAsyncQueryRepository" = "advanced_alchemy.repository.SQLAlchemySyncQueryRepository"
"advanced_alchemy.repository.SQLAlchemyAsyncRepository" = "advanced_alchemy.repository.SQLAlchemySyncRepository"
"advanced_alchemy.repository.SQLAlchemyAsyncRepositoryProtocol" = "advanced_alchemy.repository.SQLAlchemySyncRepositoryProtocol"
"advanced_alchemy.repository.SQLAlchemyAsyncSlugRepository" = "advanced_alchemy.repository.SQLAlchemySyncSlugRepository"
"advanced_alchemy.repository.SQLAlchemyAsyncSlugRepositoryProtocol" = "advanced_alchemy.repository.SQLAlchemySyncSlugRepositoryProtocol"
"advanced_alchemy.repository.memory.SQLAlchemyAsyncMockRepository" = "advanced_alchemy.repository.memory.SQLAlchemySyncMockRepository"
"advanced_alchemy.repository.memory.SQLAlchemyAsyncMockSlugRepository" = "advanced_alchemy.repository.memory.SQLAlchemySyncMockSlugRepository"
"async_scoped_session" = "scoped_session"
"collections.abc.AsyncIterator" = "collections.abc.Iterator"
"sqlalchemy.ext.asyncio.AsyncSession" = "sqlalchemy.orm.Session"
"sqlalchemy.ext.asyncio.scoping.async_scoped_session" = "sqlalchemy.orm.scoping.scoped_session"

[tool.codespell]
ignore-words-list = "selectin"
skip = 'pdm.lock, examples/us_state_lookup.json'

[tool.git-cliff.changelog]
header = """
=========
Changelog
=========\n
All commits to this project will be documented in this file.\n
"""
trim = true
# TODO: Fix footers for co-authors
body = """
{% if version %}\
    `Release [v{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }} <https://github.com/litestar-org/advanced-alchemy/releases/tag/v{{ version | trim_start_matches(pat="v") }}>`_
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    * `See All commits in v{{ version | trim_start_matches(pat="v") }} <https://github.com/litestar-org/advanced-alchemy/commits/v{{ version | trim_start_matches(pat="v") }}>`_
{% else %}\
    [unreleased]
    ------------
    {% if previous %}\
        {% if previous.commit_id %}
            `{{ previous.commit_id | default(value='') | truncate(length=7, end='') }} <https://github.com/litestar-org/advanced-alchemy/commit/{{ previous.commit_id }}>`_ is the last commit in the changelog before unreleased changes.
        {% endif %}\
    {% else %}
        `Initial commit`
    {% endif %}
{% endif %}\
{% if previous %}\
    {% if previous.commit_id and version %}
        `{{ previous.commit_id | default(value='') | truncate(length=7, end='') }} <https://github.com/litestar-org/advanced-alchemy/commit/{{ previous.commit_id }}>`_ ... \
            `{{ commit_id | default(value='') | truncate(length=7, end='') }} <https://github.com/litestar-org/advanced-alchemy/commit/{{ commit_id }}>`_ \
            | `See diff for {{ version | trim_start_matches(pat="v") }} <https://github.com/litestar-org/advanced-alchemy/compare/{{ previous.commit_id }}...{{ commit_id }}>`_
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    {{ group | upper_first }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {% for commit in commits %}
        * (`{{ commit.id | default(value='') | truncate(length=7, end='') }} <https://github.com/litestar-org/advanced-alchemy/commit/{{ commit.id }}>`_) {% if commit.breaking %}[**breaking**] {% endif %} - {{ commit.message | upper_first }} {% if commit.github.username %} by `@{{ commit.github.username }} <https://github.com/{{ commit.github.username }}>`_ {%- endif %}\
          {% if commit.github.pr_number %} in `#{{ commit.github.pr_number }} <https://gihub.com/litestar-org/advanced-alchemy/pull/{{ commit.github.pr_number }}>`_ {%- endif %}\
    {% endfor %}
{% endfor %}\n
"""
footer = """
Advanced Alchemy Changelog
"""

[tool.git-cliff.git]
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^doc", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^style", group = "Styling" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore", group = "Miscellaneous Tasks" },
  { body = ".*security", group = "Security" },
]
commit_preprocessors = [
  # Matches a single backtick that is not preceded by another backtick (negative lookbehind)
  # and not followed by another backtick (negative lookahead).. but these aren't supported
  # in git cliff regexes. So we have to do it in 3 steps:
  # Step 1: Replace pairs of backticks with a placeholder (e.g., "DOUBLEBACKTICK")
  { pattern = "``", replace = "DOUBLEBACKTICK" },
  # Step 2: Replace single backticks with double backticks
  { pattern = "`", replace = "``" },
  # Step 3: Replace the placeholder back to double backticks
  { pattern = "DOUBLEBACKTICK", replace = "``" },
  # TODO: Fix Co-authored commits
]
conventional_commits = true
filter_commits = false
filter_unconventional = true
ignore_tags = ""
link_parsers = [
  # TODO: Supposedly matches on #1234 but doesn't work?
  { pattern = "\\(#(\\d+)\\)", href = "https://github.com/litestar-org/advanced-alchemy/issues/$1" },
]
protect_breaking_commits = false
skip_tags = "v0.1.0-beta.1"
sort_commits = "oldest"
split_commits = false
tag_pattern = "v[0-9]*"
topo_order = false

[tool.git-cliff.remote.github]
owner = "litestar-org"
repo = "advanced-alchemy"
